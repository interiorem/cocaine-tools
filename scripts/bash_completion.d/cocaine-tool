#!/bin/sh
# cocaine-tool(1) completion

_cocaine_tool()
{
    local cur prev special i

    LOCATOR=cocaine.tools.helpers.completer

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    subcommands_1="app cluster crashlog group help info locate logging metrics profile routing runlist timeouts tracing vicodyn version"
    subcommands_app="check help import list pause remove restart start stop upload view"
    subcommands_profile="copy edit help list remove rename upload view"
    subcommands_runlist="add-app copy create edit help list remove remove-app rename upload view"
    subcommands_crashlog="clean cleanrange help list remove removeall status view"
    subcommands_group="copy create edit help list pop push refresh remove rename view"
    subcommands_tracing="help remove store view"
    subcommands_timeouts="drop help remove store view"
    subcommands_logging="help list_filters list_loggers remove_filter set_cluster_filter set_filter"
    subcommands_vicodyn="info apps peers"

    if [[ ${COMP_CWORD} == 1 ]] ; then
        COMPREPLY=( $(compgen -W "${subcommands_1}" -- ${cur}) )
        return 0
    fi

    subcmd_1="${COMP_WORDS[1]}"
    case "${subcmd_1}" in
    app)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_app}" -- ${cur}) )
            return 0
        fi

        subcmd_2="${COMP_WORDS[2]}"
        case "${subcmd_2}" in
        list)
	        COMPREPLY=()
            return 0
            ;;
        view|check|remove|pause|stop)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type app`" -- ${cur}))
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        upload)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=()
                return 0
                ;;
            --manifest)
                _filedir
                return 0
                ;;
            --package)
                _filedir
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name --manifest --package --docker-address --registry" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        start|restart)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type app`" -- ${cur}))
                return 0
                ;;
            --profile)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type profile`" -- ${cur}))
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name --profile" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        *)
            ;;
        esac
        ;;
    profile)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_profile}" -- ${cur}) )
            return 0
        fi

        subcmd_2="${COMP_WORDS[2]}"
        case "${subcmd_2}" in
        list)
	        COMPREPLY=()
            return 0
            ;;
        view|remove)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type profile`" -- ${cur}))
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name" -- ${cur}))
                return 0
                ;;
            esac
            ;;
	    upload)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                return 0
                ;;
	        --profile)
                _filedir
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name --profile" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        *)
            ;;
        esac
        ;;
    runlist)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_runlist}" -- ${cur}) )
            return 0
        fi

        subcmd_2="${COMP_WORDS[2]}"
        case "${subcmd_2}" in
        list)
	        COMPREPLY=()
            return 0
            ;;
        view|remove)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type runlist`" -- ${cur}))
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name" -- ${cur}))
                return 0
                ;;
            esac
            ;;
	    upload)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                return 0
                ;;
            --runlist)
                _filedir
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name --runlist" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        add-app)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type runlist`" -- ${cur}))
                return 0
                ;;
            --app)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type app`" -- ${cur}))
                return 0
                ;;
            --profile)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type profile`" -- ${cur}))
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name --app --profile" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        *)
            ;;
        esac
        ;;
    crashlog)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_crashlog}" -- ${cur}) )
            return 0
        fi

        subcmd_2="${COMP_WORDS[2]}"
        case "${subcmd_2}" in
        list|removeall)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type app`" -- ${cur}))
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name" -- ${cur}))
                return 0
                ;;
            esac
            ;;
	    view|remove)
            case "${COMP_WORDS[COMP_CWORD-1]}" in
            --name)
                COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type app`" -- ${cur}))
                return 0
                ;;
	        --timestamp)
                return 0
                ;;
            *)
                COMPREPLY=($(compgen -W "--name --timestamp" -- ${cur}))
                return 0
                ;;
            esac
            ;;
        *)
            ;;
        esac
        ;;
    group)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_group}" -- ${cur}) )
            return 0
        fi

        subcmd_2="${COMP_WORDS[2]}"
        case "${subcmd_2}" in
        # list view create remove refresh push pop
        view|remove|push|pop)
            COMPREPLY=($(compgen -W "`python -m ${LOCATOR} ${COMP_WORDS[*]} --locator_type group`" -- ${cur}))
            return 0
            ;;
        esac
        ;;
    tracing)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_tracing}" -- ${cur}) )
            return 0
        fi
        ;;
    timeouts)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_timeouts}" -- ${cur}) )
            return 0
        fi
        ;;
    logging)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_logging}" -- ${cur}) )
            return 0
        fi
        ;;
    vicodyn)
        if [[ ${COMP_CWORD} == 2 ]] ; then
            COMPREPLY=( $(compgen -W "${subcommands_vicodyn}" -- ${cur}) )
            return 0
        fi

        subcmd_2="${COMP_WORDS[2]}"
        case "${subcmd_2}" in
        list_filters|list_loggers)
	        COMPREPLY=()
            return 0
            ;;
        set_filter|set_cluster_filter)
            if [[ ${COMP_CWORD} == 3 ]] ; then
                COMPREPLY=($(compgen -W "--logger_name --filter_def --ttl" -- ${cur}))
                return 0
            fi
            ;;
        remove_filter)
            if [[ ${COMP_CWORD} == 3 ]] ; then
                COMPREPLY=($(compgen -W "--filter_id" -- ${cur}))
                return 0
            fi
            ;;
        esac
        ;;
    help)
    COMPREPLY=( $(compgen -W "${subcommands_1}" -- ${cur}))
    return 0
        ;;
    esac
    return 0
} &&
complete -F _cocaine_tool cocaine-tool

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
